{"version":3,"sources":["../../../src/components/check-circle-filled.tsx","../../../src/components/info-circle-filled.tsx","../../../src/notification/NotificationList.tsx","../../../src/notification/Notification.tsx","../../../src/notification/defaultProps.ts","../../../src/notification/NotificationPlugin.ts","../../../src/notification/index.ts","../../../src/button/Button.tsx","../../../src/button/defaultProps.ts","../../../src/button/index.ts"],"names":["element","CheckCircleFilledIcon","forwardRef","createElement","IconBase","props","id","ref","icon","InfoCircleFilledIcon","seed","listMap","NotificationRemoveContext","React","NotificationList","placement","zIndex","classPrefix","useConfig","useState","list","setList","remove","index","item","tempList","oldList","calOffset","isNaN","Number","offset","push","key","String","style","margin","Array","options","horizontal","vertical","horizontalOffset","verticalOffset","marginTop","marginBottom","marginLeft","marginRight","ref2","theme","Promise","removeAll","useImperativeHandle","value","a","className","props2","onDurationEnd","onCloseBtnClick","Notification","title","content","closeBtn","footer","duration","useContext","close","timer","setTimeout","clearTimeout","classNames","IconWrapper","children","renderIcon","onClick","e","renderNotification","attach","element2","document","containerId","container","resolve","hasExec","ReactDOM","listInstance","NotificationPlugin","instance","notification","Button","type","variant","disabled","loading","size","block","ghost","shape","buttonProps","btnRef","useRef","useRipple","renderChildren","iconNode","inheritColor","renderTheme","_Button"],"mappings":"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","file":"static/js/5.e4be5701.chunk.js","sourcesContent":["// This file is generated automatically by `useTemplate.ts`. DO NOT EDIT IT.\n\nimport { createElement,forwardRef, Ref } from 'react';\nimport { IconBase, IconProps } from '../icon';\n\nimport '../style/css';\n\nconst element = {\"tag\":\"svg\",\"attrs\":{\"fill\":\"none\",\"viewBox\":\"0 0 16 16\",\"width\":\"1em\",\"height\":\"1em\"},\"children\":[{\"tag\":\"path\",\"attrs\":{\"fill\":\"currentColor\",\"d\":\"M8 15A7 7 0 108 1a7 7 0 000 14zM4.5 8.2l.7-.7L7 9.3l3.8-3.8.7.7L7 10.7 4.5 8.2z\",\"fillOpacity\":0.9}}]};\n\nconst CheckCircleFilledIcon = forwardRef<SVGElement, IconProps>((props: IconProps, ref: Ref<SVGElement>) => createElement(\n  IconBase,\n  {\n    ...props,\n    id: 'check-circle-filled',\n    ref,\n    icon: element,\n  },\n));\n\nCheckCircleFilledIcon.displayName = 'CheckCircleFilledIcon';\n\nexport default CheckCircleFilledIcon;\n","// This file is generated automatically by `useTemplate.ts`. DO NOT EDIT IT.\n\nimport { createElement,forwardRef, Ref } from 'react';\nimport { IconBase, IconProps } from '../icon';\n\nimport '../style/css';\n\nconst element = {\"tag\":\"svg\",\"attrs\":{\"fill\":\"none\",\"viewBox\":\"0 0 16 16\",\"width\":\"1em\",\"height\":\"1em\"},\"children\":[{\"tag\":\"path\",\"attrs\":{\"fill\":\"currentColor\",\"d\":\"M8 15A7 7 0 108 1a7 7 0 000 14zM7.4 4h1.2v1.2H7.4V4zm.1 2.5h1V12h-1V6.5z\",\"fillOpacity\":0.9}}]};\n\nconst InfoCircleFilledIcon = forwardRef<SVGElement, IconProps>((props: IconProps, ref: Ref<SVGElement>) => createElement(\n  IconBase,\n  {\n    ...props,\n    id: 'info-circle-filled',\n    ref,\n    icon: element,\n  },\n));\n\nInfoCircleFilledIcon.displayName = 'InfoCircleFilledIcon';\n\nexport default InfoCircleFilledIcon;\n","import React, { forwardRef, useImperativeHandle, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport useConfig from '../_util/useConfig';\nimport {\n  NotificationInfoOptions,\n  NotificationInstance,\n  NotificationPlacementList,\n  NotificationThemeList,\n  TdNotificationProps,\n} from './type';\nimport { Styles } from '../common';\nimport noop from '../_util/noop';\nimport NotificationComponent from './Notification';\n\ninterface NotificationListInstance extends TdNotificationProps {\n  push: (theme: NotificationThemeList, options: NotificationInfoOptions) => Promise<NotificationInstance>;\n  remove: (key: string) => void;\n  removeAll: () => void;\n}\n\ninterface NotificationListOpenOption extends NotificationInfoOptions {\n  id: string;\n  key: string;\n  theme: NotificationThemeList;\n  style: Styles;\n  ref: React.RefObject<NotificationInstance>;\n}\n\ninterface NotificationListProps {\n  attach: HTMLElement;\n  zIndex: number;\n  placement: NotificationPlacementList;\n}\n\nlet seed = 0;\n\nexport const listMap: Map<NotificationPlacementList, NotificationListInstance> = new Map();\n\nexport const NotificationRemoveContext = React.createContext<(key: string) => void>(noop);\n\nconst NotificationList = forwardRef<NotificationListInstance, NotificationListProps>((props, ref) => {\n  const { placement, zIndex } = props;\n  const { classPrefix } = useConfig();\n  const [list, setList] = useState<NotificationListOpenOption[]>([]);\n\n  const remove = (key: string) => {\n    setList((oldList) => {\n      const index = oldList.findIndex((item) => item.key === key);\n      if (index !== -1) {\n        const tempList = [...oldList];\n        tempList.splice(index, 1);\n        return [...tempList];\n      }\n      return oldList;\n    });\n  };\n\n  const calOffset = (offset: string | number) => {\n    if (!offset) return '16px';\n    return isNaN(Number(offset)) ? offset : `${offset}px`;\n  };\n\n  const push = (theme: NotificationThemeList, options: NotificationInfoOptions): Promise<NotificationInstance> => {\n    const key = String((seed += 1));\n    let style: React.CSSProperties = {\n      margin: '16px',\n    };\n    if (Array.isArray(options.offset)) {\n      const [horizontal, vertical] = [...options.offset];\n      const horizontalOffset = calOffset(horizontal);\n      const verticalOffset = calOffset(vertical);\n\n      style = {\n        marginTop: verticalOffset,\n        marginBottom: verticalOffset,\n        marginLeft: horizontalOffset,\n        marginRight: horizontalOffset,\n      };\n    }\n    const ref = React.createRef<NotificationInstance>();\n\n    setList((oldList) => [\n      ...oldList,\n      {\n        ...options,\n        key,\n        theme,\n        style,\n        ref,\n        id: key,\n      },\n    ]);\n\n    return Promise.resolve(ref.current);\n  };\n\n  const removeAll = () => {\n    setList([]);\n  };\n\n  useImperativeHandle(ref, () => ({\n    push,\n    remove,\n    removeAll,\n  }));\n\n  return (\n    <NotificationRemoveContext.Provider value={remove}>\n      <div className={`${classPrefix}-notification__show--${placement}`} style={{ zIndex }}>\n        {list.map((props) => {\n          const { onDurationEnd = noop, onCloseBtnClick = noop } = props;\n          return (\n            <NotificationComponent\n              ref={props.ref}\n              key={props.key}\n              {...props}\n              onDurationEnd={() => {\n                remove(props.key);\n                onDurationEnd();\n              }}\n              onCloseBtnClick={(e) => {\n                remove(props.key);\n                onCloseBtnClick(e);\n              }}\n            />\n          );\n        })}\n      </div>\n    </NotificationRemoveContext.Provider>\n  );\n});\n\nexport const fetchListInstance = (\n  placement: NotificationPlacementList,\n  attach: HTMLElement,\n  zIndex: number,\n): Promise<NotificationListInstance> =>\n  new Promise((resolve) => {\n    if (listMap.has(placement)) {\n      resolve(listMap.get(placement));\n    } else {\n      let hasExec = false;\n      ReactDOM.render(\n        <NotificationList\n          attach={attach}\n          placement={placement}\n          zIndex={Number(zIndex)}\n          ref={(instance) => {\n            if (!hasExec) {\n              hasExec = true;\n              listMap.set(placement, instance);\n              resolve(instance);\n            }\n          }}\n        />,\n        attach,\n      );\n    }\n  });\n","import React, { forwardRef, useContext } from 'react';\nimport classNames from 'classnames';\nimport { CheckCircleFilledIcon, CloseIcon, InfoCircleFilledIcon } from 'tdesign-icons-react';\nimport { NotificationRemoveContext } from './NotificationList';\nimport noop from '../_util/noop';\nimport useConfig from '../_util/useConfig';\n\nimport { NotificationInstance, TdNotificationProps } from './type';\nimport { Styles } from '../common';\nimport { notificationDefaultProps } from './defaultProps';\n\nexport interface NotificationProps extends TdNotificationProps {\n  style?: Styles;\n  id?: string;\n}\n\nexport const Notification = forwardRef<any, NotificationProps>((props, ref) => {\n  const {\n    title,\n    content,\n    theme,\n    icon,\n    closeBtn,\n    footer,\n    duration,\n    onCloseBtnClick = noop,\n    onDurationEnd = noop,\n    style,\n    id,\n  } = props;\n\n  const { classPrefix } = useConfig();\n\n  const remove = useContext(NotificationRemoveContext);\n  React.useImperativeHandle(ref as React.Ref<NotificationInstance>, () => ({ close: () => remove(id) }));\n\n  /* eslint-disable react-hooks/exhaustive-deps */\n  React.useEffect(() => {\n    let timer;\n    if (duration > 0) {\n      timer = setTimeout(() => {\n        clearTimeout(timer);\n        onDurationEnd();\n      }, duration);\n    }\n    return () => {\n      if (timer) clearTimeout(timer);\n    };\n  }, []);\n\n  const renderIcon = () => {\n    const IconWrapper = ({ children }) => <div className={`${classPrefix}-notification__icon`}>{children}</div>;\n\n    // 调整优先级，icon 优先级最高\n    if (React.isValidElement(icon)) {\n      return <IconWrapper>{icon}</IconWrapper>;\n    }\n\n    if (theme && theme === 'success') {\n      return (\n        <IconWrapper>\n          <CheckCircleFilledIcon className={`${classPrefix}-is-success`} />\n        </IconWrapper>\n      );\n    }\n    if (theme && ['info', 'warning', 'error'].indexOf(theme) >= 0) {\n      return (\n        <IconWrapper>\n          <InfoCircleFilledIcon className={`${classPrefix}-is-${theme}`} />\n        </IconWrapper>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div\n      className={classNames(`${classPrefix}-notification`, {\n        [`${classPrefix}-is-${theme}`]: theme,\n      })}\n      style={style}\n    >\n      {renderIcon()}\n      <div className={`${classPrefix}-notification__main`}>\n        <div className={`${classPrefix}-notification__title__wrap`}>\n          <span className={`${classPrefix}-notification__title`}>{title}</span>\n          {((): React.ReactNode => {\n            if (typeof closeBtn === 'boolean' && closeBtn) {\n              return (\n                <CloseIcon\n                  className={`${classPrefix}-icon-close`}\n                  onClick={(e) => {\n                    onCloseBtnClick({ e });\n                  }}\n                />\n              );\n            }\n            if (React.isValidElement(closeBtn)) {\n              return (\n                <div\n                  onClick={(e) => {\n                    onCloseBtnClick({ e });\n                  }}\n                >\n                  {closeBtn}\n                </div>\n              );\n            }\n            return null;\n          })()}\n        </div>\n        {((): React.ReactNode => {\n          if (typeof content === 'string') {\n            return <div className={`${classPrefix}-notification__content`}>{content}</div>;\n          }\n          if (React.isValidElement(content)) return content;\n          return null;\n        })()}\n        {React.isValidElement(footer) && <div className={`${classPrefix}-notification__detail`}>{footer}</div>}\n        {typeof footer === 'function' && <div className={`${classPrefix}-notification__detail`}>{footer()}</div>}\n      </div>\n    </div>\n  );\n});\n\nNotification.displayName = 'Notification';\nNotification.defaultProps = notificationDefaultProps;\n\nexport default Notification;\n","/**\n * 该文件为脚本自动生成文件，请勿随意修改。如需修改请联系 PMC\n * */\n\nimport { TdNotificationProps } from './type';\n\nexport const notificationDefaultProps: TdNotificationProps = {\n  duration: 3000,\n  theme: 'info',\n};\n","import { fetchListInstance, listMap } from './NotificationList';\nimport {\n  NotificationCloseAllMethod,\n  NotificationCloseMethod,\n  NotificationErrorMethod,\n  NotificationInfoMethod,\n  NotificationInfoOptions,\n  NotificationInstance,\n  NotificationOptions,\n  NotificationPlacementList,\n  NotificationSuccessMethod,\n  NotificationThemeList,\n  NotificationWarningMethod,\n} from './type';\n\n// 扩展接口声明的结构，用户使用时可得到 .info 的 ts 提示\nexport interface Notification {\n  (theme: NotificationThemeList, options: NotificationOptions): Promise<NotificationInstance>;\n  info: NotificationInfoMethod;\n  success: NotificationSuccessMethod;\n  warning: NotificationWarningMethod;\n  error: NotificationErrorMethod;\n  closeAll: NotificationCloseAllMethod;\n  close: NotificationCloseMethod;\n}\n\n/**\n * @desc 函数调用时的渲染函数\n * @param theme 主题类型\n * @param options 通知的参数\n */\nconst renderNotification = (theme: NotificationThemeList, options: NotificationInfoOptions) => {\n  if (typeof options !== 'object') return;\n\n  const placement: NotificationPlacementList = (() => {\n    if (['top-left', 'top-right', 'bottom-left', 'bottom-right'].indexOf(options.placement) >= 0) {\n      return options.placement;\n    }\n    return 'top-right';\n  })();\n\n  const attach: HTMLElement = (() => {\n    if (options.attach && typeof options.attach === 'string') {\n      const element: Element = document.querySelector(options.attach);\n      if (element instanceof HTMLElement) return element;\n    }\n\n    if (options.attach instanceof HTMLElement) return options.attach;\n\n    const containerId = `tdesign-notification-${placement}`;\n    const container = document.querySelector(`#${containerId}`);\n    if (container && container instanceof HTMLElement) {\n      return container;\n    }\n\n    const element: HTMLDivElement = document.createElement('div');\n    element.setAttribute('id', containerId);\n    document.body.appendChild(element);\n    return element;\n  })();\n\n  const zIndex = options.zIndex || 6000;\n\n  return fetchListInstance(placement, attach, zIndex).then((listInstance) => listInstance.push(theme, options));\n};\n\nexport const NotificationPlugin: Notification = (theme, props) => renderNotification(theme, props);\nNotificationPlugin.info = (options) => renderNotification('info', options);\nNotificationPlugin.success = (options) => renderNotification('success', options);\nNotificationPlugin.warning = (options) => renderNotification('warning', options);\nNotificationPlugin.error = (options) => renderNotification('error', options);\nNotificationPlugin.close = (promise) => promise.then((instance) => instance.close());\nNotificationPlugin.closeAll = () => listMap.forEach((list) => list.removeAll());\n","import _Notification from './Notification';\nimport { NotificationPlugin as _NotificationPlugin } from './NotificationPlugin';\n\nimport './style/index.js';\n\nexport * from './type';\n\nexport const Notification = _Notification;\nexport const notification = _NotificationPlugin;\nexport const NotificationPlugin = _NotificationPlugin;\n\nexport default Notification;\n","import React, { forwardRef, useRef } from 'react';\nimport classNames from 'classnames';\nimport useConfig from '../_util/useConfig';\nimport useRipple from '../_util/useRipple';\nimport Loading from '../loading';\nimport { TdButtonProps } from './type';\nimport { buttonDefaultProps } from './defaultProps';\n\n/**\n * 除表格中列出的属性外，支持透传原生 `<button>` 标签支持的属性。\n */\nexport interface ButtonProps extends TdButtonProps, React.ButtonHTMLAttributes<HTMLButtonElement> {}\n\n/**\n * 按钮组件\n */\nconst Button = forwardRef(\n  (\n    {\n      type,\n      theme,\n      variant,\n      icon,\n      disabled,\n      loading,\n      size,\n      block,\n      ghost,\n      shape,\n      children,\n      content,\n      className,\n      onClick,\n      ...buttonProps\n    }: ButtonProps,\n    ref: React.RefObject<HTMLButtonElement>,\n  ) => {\n    const { classPrefix } = useConfig();\n\n    const btnRef = useRef();\n    useRipple(ref || btnRef);\n\n    const renderChildren = content ?? children;\n\n    let iconNode = icon;\n    if (loading) iconNode = <Loading loading={loading} inheritColor={true} />;\n\n    let renderTheme = theme;\n\n    if (!theme) {\n      if (variant === 'base') {\n        renderTheme = 'primary';\n      } else {\n        renderTheme = 'default';\n      }\n    }\n\n    return (\n      <button\n        {...buttonProps}\n        ref={ref || btnRef}\n        type={type}\n        className={classNames(\n          className,\n          [\n            `${classPrefix}-button`,\n            `${classPrefix}-button--theme-${renderTheme}`,\n            `${classPrefix}-button--variant-${variant}`,\n          ],\n          {\n            [`${classPrefix}-button--shape-${shape}`]: shape !== 'rectangle',\n            [`${classPrefix}-button--ghost`]: ghost,\n            [`${classPrefix}-is-loading`]: loading,\n            [`${classPrefix}-is-disabled`]: disabled || loading,\n            [`${classPrefix}-size-s`]: size === 'small',\n            [`${classPrefix}-size-l`]: size === 'large',\n            [`${classPrefix}-size-full-width`]: block,\n          },\n        )}\n        onClick={!disabled && !loading ? onClick : undefined}\n        disabled={disabled || loading}\n      >\n        {iconNode ? (\n          <>\n            {iconNode}\n            {renderChildren && <span className={`${classPrefix}-button__text`}>{renderChildren}</span>}\n          </>\n        ) : (\n          <span className={`${classPrefix}-button__text`}>{renderChildren}</span>\n        )}\n      </button>\n    );\n  },\n);\n\nButton.displayName = 'Button';\nButton.defaultProps = buttonDefaultProps;\n\nexport default Button;\n","/**\n * 该文件为脚本自动生成文件，请勿随意修改。如需修改请联系 PMC\n * */\n\nimport { TdButtonProps } from './type';\n\nexport const buttonDefaultProps: TdButtonProps = {\n  block: false,\n  ghost: false,\n  loading: false,\n  shape: 'rectangle',\n  size: 'medium',\n  type: 'button',\n  variant: 'base',\n};\n","import _Button from './Button';\n\nimport './style/index.js';\n\nexport type { ButtonProps } from './Button';\nexport * from './type';\n\nexport const Button = _Button;\nexport default Button;\n"],"sourceRoot":""}