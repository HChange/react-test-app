{"version":3,"sources":["pages/recoil/components/Async/mockRequest.ts","pages/recoil/components/Async/asyncState.ts","pages/recoil/components/Async/AsyncModules.tsx","pages/recoil/components/Async/index.tsx","pages/recoil/recoilState.ts","pages/recoil/components/Count/index.tsx","pages/recoil/components/InputCom/index.tsx","pages/recoil/components/Loadable/state.ts","pages/recoil/components/Loadable/mockRequest.ts","pages/recoil/components/Loadable/index.tsx","pages/recoil/components/Selector/state.ts","pages/recoil/components/Selector/index.tsx","pages/recoil/components/Todolist/todolistState.ts","pages/recoil/components/Todolist/Add/index.tsx","pages/recoil/components/Todolist/ListItem/index.tsx","pages/recoil/components/Todolist/List/index.tsx","pages/recoil/components/Todolist/Stats/index.tsx","pages/recoil/components/Todolist/index.tsx","pages/recoil/index.tsx"],"names":["mockRequest","id","Promise","resolve","reject","setTimeout","Math","random","data","name","age","code","msg","asyncState","selector","key","get","a","res","console","log","selectorFamily","value","AsyncModule","response","useRecoilValue","Async","fallback","nameState","atom","default","countState","length","Count","count","InputCom","useRecoilState","setName","onChange","v","toString","loadashState","Loadable","stateLoadable","useRecoilValueLoadable","state","contents","atomTest","setGetTest","set","newValue","DefaultValue","Selector","setValue","Number","todolistState","todolistStatsState","todolist","totalNum","totalComplete","filter","item","isComplete","totalWillComplete","precentComplete","Add","useState","setRecords","useSetRecoilState","style","display","theme","onClick","prev","text","notification","error","content","ListItem","setTodolist","padding","justifyContent","background","type","newTodolist","map","cursor","List","Stats","floor","Todolist","RecoilTest","className"],"mappings":"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","file":"static/js/6.4610d1e3.chunk.js","sourcesContent":["export const mockRequest = (id?: any) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const randNum = Math.random() * 10;\n      if (randNum > 0) {\n        resolve({\n          data: [\n            {\n              name: 'change',\n              age: 23,\n            },\n            {\n              name: 'ad',\n              age: '22',\n            },\n          ],\n          code: 'Success',\n        });\n      } else {\n        // eslint-disable-next-line prefer-promise-reject-errors\n        reject({\n          code: 'Failed',\n          msg: '请求失败！',\n          data: [],\n        });\n      }\n    }, 3000);\n  });\n};\n","import { selector, selectorFamily } from 'recoil';\nimport { mockRequest } from './mockRequest';\n\nexport const asyncState = selector({\n  key: 'asyncState1',\n  get: async ({ get }) => {\n    let res;\n    try {\n      res = await mockRequest();\n    } catch (e) {\n      console.log(e);\n    }\n    return res;\n  },\n});\n\n// selectorFamily\nexport const family = selectorFamily({\n  key: 'selectorFamily',\n  get: (value) => async () => {\n    let res;\n    try {\n      res = await mockRequest(value);\n    } catch (e) {\n      console.log(e);\n    }\n    return res;\n  },\n});\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { asyncState } from './asyncState';\n\nconst AsyncModule = () => {\n  const response: any = useRecoilValue(asyncState);\n  return <div>{response?.code}</div>;\n};\n\nexport default AsyncModule;\n","import React, { Suspense } from 'react';\nimport AsyncModule from './AsyncModules';\n\nconst Async = () => {\n  return (\n    // @ts-ignore\n    <Suspense fallback={<>加载中...</>}>\n      <AsyncModule />\n    </Suspense>\n  );\n};\n\nexport default Async;\n","import { atom, selector } from 'recoil';\n\nexport const nameState = atom({\n  key: 'nameState',\n  default: '',\n});\n\nexport const countState = selector({\n  key: 'countState',\n  get: ({ get }) => {\n    const name = get(nameState);\n    return name.length;\n  },\n});\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { countState } from '../../recoilState';\n\nconst Count = () => {\n  const count = useRecoilValue(countState);\n  return <div>名字长度为:{count}</div>;\n};\n\nexport default Count;\n","import React from 'react';\nimport { Input } from 'tdesign-react';\nimport { useRecoilState } from 'recoil';\nimport { nameState } from '../../recoilState';\n\nconst InputCom = () => {\n  const [name, setName] = useRecoilState(nameState);\n\n  return (\n    <div>\n      <Input value={name} onChange={(v) => setName(v.toString())} />\n      <div>输入的名字是：{name}</div>\n    </div>\n  );\n};\n\nexport default InputCom;\n","import { selector } from 'recoil';\nimport { mockRequest } from './mockRequest';\n\nexport const loadashState = selector<{ data: any; code: any }>({\n  key: 'asyncState2',\n  get: async ({ get }) => {\n    let res = await mockRequest();\n\n    return res;\n  },\n});\n","export const mockRequest = (id?: any): Promise<{ data: any; code: any }> => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const randNum = Math.random() * 10;\n      if (randNum > 0) {\n        resolve({\n          data: [\n            {\n              name: 'change',\n              age: 23,\n            },\n            {\n              name: 'ad',\n              age: '22',\n            },\n          ],\n          code: 'Success',\n        });\n      } else {\n        // eslint-disable-next-line prefer-promise-reject-errors\n        reject({\n          code: 'Failed',\n          msg: '请求失败！',\n          data: [],\n        });\n      }\n    }, 3000);\n  });\n};\n","import React from 'react';\nimport { useRecoilValueLoadable } from 'recoil';\nimport { loadashState } from './state';\n\nconst Loadable = () => {\n  const stateLoadable = useRecoilValueLoadable(loadashState);\n  switch (stateLoadable.state) {\n    case 'hasValue':\n      return <div>{stateLoadable.contents.code}</div>;\n    case 'loading':\n      return <div>Loading...</div>;\n    case 'hasError':\n      throw stateLoadable.contents;\n  }\n};\n\nexport default Loadable;\n","import { atom, DefaultValue, selector } from 'recoil';\n\nexport const atomTest = atom({\n  key: 'atomTest',\n  default: 0,\n});\n\nexport const setGetTest = selector<number>({\n  key: 'setGetTest',\n  get: ({ get }) => {\n    const val = get(atomTest);\n    return val / 2;\n  },\n  set: ({ set }, newValue) => {\n    set(atomTest, newValue instanceof DefaultValue ? newValue : (newValue as number) * 4);\n  },\n});\n","import { Input } from 'tdesign-react';\nimport React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { setGetTest } from './state';\n\nconst Selector = () => {\n  const [value, setValue] = useRecoilState(setGetTest);\n\n  return (\n    <div>\n      <Input onChange={(v) => setValue(Number(v))} value={value} />\n    </div>\n  );\n};\n\nexport default Selector;\n","import { atom, selector } from 'recoil';\nimport { ItemProps } from './types';\n\nexport const todolistState = atom<ItemProps[]>({\n  key: 'todolistState',\n  default: [],\n});\n\nexport const todolistStatsState = selector({\n  key: 'todolistStatsState',\n  get: ({ get }) => {\n    const todolist = get(todolistState);\n    const totalNum = todolist.length;\n    const totalComplete = todolist.filter((item) => item.isComplete).length;\n    const totalWillComplete = totalNum - totalComplete;\n    const precentComplete = totalComplete === 0 ? 0 : totalComplete / totalNum;\n    return {\n      totalNum,\n      totalComplete,\n      totalWillComplete,\n      precentComplete,\n    };\n  },\n});\n","import { Button, Input, notification } from 'tdesign-react';\nimport React, { useState } from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport { todolistState } from '../todolistState';\n\n// 用于创建唯一 ID 的工具\nlet id = 0;\nfunction getId() {\n  return id++;\n}\n\nconst Add = () => {\n  const [value, setValue] = useState<string>('');\n  const setRecords = useSetRecoilState(todolistState);\n  const addAction = () => {\n    if (!value) {\n      notification.error({ content: '请输入有效值' });\n    } else {\n      setRecords((prev) => [{ id: getId(), isComplete: false, text: value }, ...prev]);\n      setValue('');\n    }\n  };\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <Input onChange={(v) => setValue(v.toString())} value={value} />\n      <Button theme=\"primary\" onClick={addAction}>\n        添加\n      </Button>\n    </div>\n  );\n};\n\nexport default Add;\n","import React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { todolistState } from '../todolistState';\nimport { ItemProps } from '../types';\n\nconst ListItem: React.FC<ItemProps> = ({ id, text, isComplete }) => {\n  const [todolist, setTodolist] = useRecoilState(todolistState);\n  const toggleComplete = () => {\n    const newTodolist = todolist.map((item) => {\n      if (item.id === id) {\n        return {\n          ...item,\n          isComplete: !item.isComplete,\n        };\n      } else {\n        return item;\n      }\n    });\n    setTodolist(newTodolist);\n  };\n\n  // delete\n  const deleteAction = () => {\n    const newTodolist = todolist.filter((item) => item.id !== id);\n    setTodolist(newTodolist);\n  };\n  return (\n    <div style={{ padding: '5px 10px', display: 'flex', justifyContent: 'space-around', background: '#5a66ff' }}>\n      <input type=\"checkbox\" value={isComplete as any} onClick={toggleComplete} />\n      <div>{text}</div>\n      <span onClick={deleteAction} style={{ cursor: 'pointer' }}>\n        x\n      </span>\n    </div>\n  );\n};\n\nexport default ListItem;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport ListItem from '../ListItem';\nimport { todolistState } from '../todolistState';\n\nconst List = () => {\n  const value = useRecoilValue(todolistState);\n  return (\n    <div>\n      {value.map((item) => {\n        return <ListItem {...item} key={item.id} />;\n      })}\n    </div>\n  );\n};\n\nexport default List;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { todolistStatsState } from '../todolistState';\n\nconst Stats = () => {\n  const { totalNum, totalComplete, totalWillComplete, precentComplete } = useRecoilValue(todolistStatsState);\n  return (\n    <div>\n      <p>统计</p>\n      <ul>\n        <li>总数：{totalNum}</li>\n        <li>已完成：{totalComplete}</li>\n        <li>待完成：{totalWillComplete}</li>\n        <li>完成率：{`${Math.floor(precentComplete * 100)}%`}</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Stats;\n","import React from 'react';\nimport Add from './Add';\nimport List from './List';\nimport Stats from './Stats';\n\nconst Todolist = () => {\n  return (\n    <div>\n      <Add />\n      <List />\n      <Stats />\n    </div>\n  );\n};\n\nexport default Todolist;\n","import React from 'react';\nimport { Page } from '@/components';\nimport Async from './components/Async';\nimport Count from './components/Count';\nimport InputCom from './components/InputCom';\nimport Loadable from './components/Loadable';\nimport Selector from './components/Selector';\nimport Todolist from './components/Todolist';\nimport './index.less';\n\nconst RecoilTest = () => {\n  return (\n    <Page>\n      <div className=\"docs\">\n        <h1>Recoil</h1>\n        <h2>简单使用</h2>\n        <InputCom />\n        <Count />\n        <hr />\n        <h2>写一个TodoList</h2>\n        <Todolist />\n        <hr />\n        <h2>来个异步的</h2>\n        <Async />\n        <h2>set get Selector</h2>\n        <Selector />\n\n        <h2>Loadable </h2>\n        <Loadable />\n      </div>\n    </Page>\n  );\n};\n\nexport default RecoilTest;\n"],"sourceRoot":""}